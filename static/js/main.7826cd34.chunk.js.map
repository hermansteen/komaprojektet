{"version":3,"sources":["lib/api.js","HourInfo.js","HourList.js","Menu.js","SplashScreen.js","RainGraph.js","App.js","serviceWorker.js","index.js"],"names":["fetchFromApi","testString","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","toPrecision","fetch","then","res","json","fetchFromApiLocationiq","cityLink","findImageFile","param","result","prefix","HourInfo","props","timeSeries","data","i","parameters","length","name","temperature","Math","round","values","cat","precip","time","validTime","substr","className","src","HourList","filteredHours","j","Object","entries","map","hour","key","Menu","id","href","city","SplashScreen","tempMin","tempMax","chanceOfRain","imageFile","alt","RainGraph","rain","pMax","onePrecent","barHeight","keys","hours","style","height","App","dataToday","useState","setData","setCity","useEffect","a","address","town","fetchData","tzoffset","Date","getTimezoneOffset","localISOTime","now","toISOString","slice","filter","timeSerie","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7826cd34.chunk.js","sourcesContent":["export function fetchFromApi () {\r\n  let testString\r\n  return new Promise(function (resolve, reject) {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      console.log(position.coords.latitude, position.coords.longitude)\r\n      const longitude = position.coords.longitude.toPrecision(8)\r\n      const latitude = position.coords.latitude.toPrecision(8)\r\n      console.log(longitude, latitude)\r\n      testString = 'https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/' + longitude + '/lat/' + latitude + '/data.json'\r\n      console.log(testString)\r\n      // eslint-disable-next-line\r\n      fetch(testString)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          // console.log(json)\r\n          resolve(json)\r\n        })\r\n    })\r\n  })\r\n}\r\n\r\nexport function fetchFromApiFixed () {\r\n  let testString\r\n  return new Promise(function (resolve, reject) {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      console.log(position.coords.latitude, position.coords.longitude)\r\n      const latitude = 59.858198399999.toPrecision(8)\r\n      const longitude = 17.646541800000.toPrecision(8)\r\n      console.log(longitude, latitude)\r\n      testString = 'https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/' + longitude + '/lat/' + latitude + '/data.json'\r\n      console.log(testString)\r\n      // eslint-disable-next-line\r\n      fetch(testString)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          // console.log(json)\r\n          resolve(json)\r\n        })\r\n    })\r\n  })\r\n}\r\n\r\nexport function fetchFromApiLocationiq () {\r\n  let cityLink\r\n  return new Promise(function (resolve, reject) {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      cityLink = 'https://us1.locationiq.com/v1/reverse.php?key=pk.3c7d149b10792893ae85cb1c22148eca&lat=' + position.coords.latitude + '&lon=' + position.coords.longitude + '&format=json'\r\n      // eslint-disable-next-line\r\n      fetch(cityLink)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          resolve(json)\r\n        })\r\n    })\r\n  })\r\n}\r\n\r\nexport function fetchFromApiLocationiqFixed () {\r\n  let cityLink\r\n  return new Promise(function (resolve, reject) {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      cityLink = 'https://us1.locationiq.com/v1/reverse.php?key=pk.3c7d149b10792893ae85cb1c22148eca&lat=' + 59.858198399999.toPrecision(8) + '&lon=' + 17.646541800000.toPrecision(8) + '&format=json'\r\n      // eslint-disable-next-line\r\n      fetch(cityLink)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          resolve(json)\r\n        })\r\n    })\r\n  })\r\n}\r\n\r\nexport function findImageFile (param) {\r\n  let result\r\n  const prefix = './img/'\r\n  switch (param) {\r\n    case 1:\r\n      result = prefix + 'clear.svg'\r\n      break\r\n    case 2:\r\n    case 3:\r\n    case 4:\r\n      result = prefix + 'halfclear.svg'\r\n      break\r\n    case 5:\r\n      result = prefix + 'cloudy.svg'\r\n      break\r\n    case 6:\r\n      result = prefix + 'overcast.svg'\r\n      break\r\n    case 7:\r\n      result = prefix + 'fog.svg'\r\n      break\r\n    case 8:\r\n    case 9:\r\n    case 10:\r\n    case 18:\r\n    case 19:\r\n    case 20:\r\n      result = prefix + 'rain.svg'\r\n      break\r\n    case 11:\r\n      result = prefix + 'thunderstorm.svg'\r\n      break\r\n    case 12:\r\n    case 13:\r\n    case 14:\r\n    case 22:\r\n    case 23:\r\n    case 24:\r\n      result = prefix + 'sleet.svg'\r\n      break\r\n    case 21 :\r\n      result = prefix + 'thunder.svg'\r\n      break\r\n    case 25:\r\n    case 26:\r\n    case 27:\r\n    case 15:\r\n    case 16:\r\n    case 17:\r\n      result = prefix + 'snow.svg'\r\n      break\r\n    default:\r\n      result = 'default'\r\n      break\r\n  }\r\n  return result\r\n}\r\n","import React from 'react'\r\nimport { findImageFile } from './lib/api.js'\r\nfunction HourInfo (props) {\r\n  const timeSeries = {}\r\n  console.log(props.data)\r\n  for (let i = 0; i < props.data[1].parameters.length; i++) {\r\n    const param = props.data[1].parameters[i]\r\n    switch (param.name) {\r\n      case 't' :\r\n        timeSeries.temperature = Math.round(param.values[0])\r\n        break\r\n      case 'Wsymb2':\r\n        timeSeries.cat = param.values[0]\r\n        break\r\n      case 'pmean':\r\n        timeSeries.precip = param.values[0]\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n  const time = props.data[1].validTime.substr(11, 5)\r\n  // console.log(timeSeries)\r\n  return (\r\n    <div className='HourInfo'>\r\n      <p>{time}</p>\r\n      <img src={findImageFile(timeSeries.cat)} />\r\n      <p>{timeSeries.temperature + '\\u00b0'}</p>\r\n    </div>\r\n  )\r\n}\r\nexport default HourInfo\r\n","import React from 'react'\r\nimport HourInfo from './HourInfo'\r\nfunction HourList (props) {\r\n  console.log('props data')\r\n  console.log(props)\r\n  const delta = 2\r\n  const filteredHours = {}\r\n  let j = 0\r\n  for (let i = 0; i < props.data.length; i = i + delta) {\r\n    filteredHours[j] = props.data[i]\r\n    j++\r\n  }\r\n  console.log('Hourlist: ')\r\n  console.log(filteredHours)\r\n  return (\r\n    <div className='HourList'>\r\n      {Object.entries(filteredHours).map((hour) => <HourInfo data={hour} key={hour.validTime} />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HourList\r\n","import React from 'react'\r\nfunction Menu (props) {\r\n  return (\r\n    <div className='Menu'>\r\n      <div id='leftSideMenu'>\r\n        <a href='https://hermansteen.github.io/komaprojektet/'><img src='./img/needle.svg' /></a>\r\n        <h1>\r\n          {props.city}\r\n        </h1>\r\n      </div>\r\n      <img src='./img/amburgur.png' />\r\n    </div>\r\n  )\r\n}\r\nexport default Menu\r\n","import React from 'react'\r\nimport { findImageFile } from './lib/api.js'\r\nfunction SplashScreen (props) {\r\n  const timeSeries = {}\r\n  for (let i = 0; i < props.data.length; i++) {\r\n    timeSeries[i] = []\r\n    for (let j = 0; j < props.data[i].parameters.length; j++) {\r\n      const param = props.data[i].parameters[j]\r\n      //   console.log(param)\r\n      switch (param.name) {\r\n        case 't' :\r\n          timeSeries[i].temperature = Math.round(param.values[0])\r\n          //   console.log('temperature found')\r\n          //   console.log(timeSeries[i])\r\n          break\r\n        case 'Wsymb2':\r\n          timeSeries[i].cat = param.values[0]\r\n          //   console.log(timeSeries[i])\r\n          break\r\n        case 'pmean':\r\n          timeSeries[i].precip = param.values[0]\r\n          break\r\n        default:\r\n          break\r\n      }\r\n    }\r\n  }\r\n  let tempMin = 1000000\r\n  let tempMax = -999999\r\n  let chanceOfRain = 0\r\n  for (let i = 0; i < props.data.length; i++) {\r\n    if (timeSeries[i].temperature > tempMax) {\r\n      tempMax = timeSeries[i].temperature\r\n    }\r\n    if (timeSeries[i].temperature < tempMin) {\r\n      tempMin = timeSeries[i].temperature\r\n    }\r\n    timeSeries[i].imageFile = findImageFile(timeSeries[i].cat)\r\n    if (timeSeries[i].precip > 0) {\r\n      chanceOfRain = 1\r\n    }\r\n  }\r\n  //   console.log(timeSeries)\r\n  //   console.log(tempMax)\r\n  //   console.log(tempMin)\r\n  return (\r\n    <div className='SplashScreen'>\r\n      <p className='description'>\r\n        {chanceOfRain\r\n          ? 'Regnskurar kan förekomma under dagen'\r\n          : 'Inget regn idag'}\r\n      </p>\r\n      <img id='currentIcon' src={timeSeries[0].imageFile} alt='current weather icon' />\r\n      <h2 className='current'>{timeSeries[0].temperature + '\\u00b0'}</h2>\r\n      <div className='minMax'>\r\n        <h3>min/max</h3>\r\n        {/* eslint-disable-next-line */}\r\n        <h3>{tempMin + '\\u00b0' + '/' + tempMax + '\\u00b0'}</h3>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default SplashScreen\r\n","import React from 'react'\r\nfunction RainGraph (props) {\r\n  const rain = {}\r\n  for (let i = 0; i < props.data.length; i++) {\r\n    rain[i] = []\r\n    for (let j = 0; j < props.data[i].parameters.length; j++) {\r\n      const param = props.data[i].parameters[j]\r\n      if (param.name === 'pmean') {\r\n        rain[i].precip = param.values[0]\r\n      }\r\n      rain[i].time = props.data[i].validTime.substr(11, 5)\r\n    }\r\n  }\r\n  let pMax = -1\r\n  for (let i = 0; i < props.data.length; i++) {\r\n    if (rain[i].precip > pMax) { pMax = rain[i].precip }\r\n  }\r\n  console.log(pMax)\r\n  const onePrecent = pMax / 100\r\n  console.log(rain)\r\n  for (let i = 0; i < props.data.length; i++) {\r\n    if (onePrecent !== 0) {\r\n      rain[i].barHeight = ((rain[i].precip / onePrecent)) + 'px'\r\n      console.log(rain[i].barHeight)\r\n    } else {\r\n      rain[i].barHeight = 1 + 'px'\r\n    }\r\n    if (rain[i].barHeight === '0px') {\r\n      rain[i].barHeight = '1px'\r\n    }\r\n  }\r\n  return (\r\n    <div className='RainGraph'>\r\n      {Object.keys(rain).map((hours) => (\r\n        <div key={hours} className='graphContainer'>\r\n          <div className='bar' style={{ height: rain[hours].barHeight }} />\r\n          <div className='graphLabel' key={hours}>{rain[hours].time}</div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RainGraph\r\n","import React, { useEffect, useState } from 'react'\nimport { fetchFromApi, fetchFromApiLocationiq, fetchFromApiFixed, fetchFromApiLocationiqFixed } from './lib/api'\nimport HourList from './HourList.js'\nimport Menu from './Menu.js'\nimport SplashScreen from './SplashScreen.js'\nimport RainGraph from './RainGraph.js'\nimport './resources/css/app.css'\n\nfunction App () {\n  const [data, setData] = useState()\n  const [city, setCity] = useState()\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await fetchFromApi()\n      // const data = await fetchFromApiFixed()\n      const city = await fetchFromApiLocationiq()\n      // const city = await fetchFromApiLocationiqFixed()\n      // console.log(data)\n      console.log(city)\n      setData(data.timeSeries)\n      if (city.address.city) {\n        city.address.town = city.address.city\n      }\n      setCity(city)\n    }\n    fetchData()\n  }, [])\n\n  let dataToday\n  const tzoffset = (new Date()).getTimezoneOffset() * 60000 // offset in milliseconds\n  const localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0)\n  if (data) {\n    dataToday = data.filter(timeSerie => timeSerie.validTime.indexOf(localISOTime.substr(0, 10)) > -1)\n  }\n  return (\n    <div className='App'>\n      {data && city\n        ? <div>\n          <Menu city={city.address.town} />\n          <SplashScreen data={dataToday} />\n          <HourList data={dataToday} />\n          <h2 className='interTitle'>Nederbörd (%)</h2>\n          <RainGraph data={dataToday} />\n          </div>\n        : null}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}